from decimal import *
from time import sleep
PI="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989"

#https://stackoverflow.com/questions/15390807/integer-square-root-in-python
#Efficient implementation of sqrt for integer numbers
def correctUntil(aprox_pi):
	for i in range (len(aprox_pi)):
		if aprox_pi[i] != PI[i]:
			return 0 if i<3 else i-2
		
def isqrt(n): 
	if n > 0: 
		x = 1 << (n.bit_length() + 1 >> 1) 
		while True: 
			y = (x + n // x) >> 1 
			if y >= x: 
				return x 
			x = y 
	elif n == 0: 
		return 0 
	else: 
		raise ValueError("square root of negative number")

def isPrime(p):
	limit = isqrt(p)+1

	if p&1 == 0 and not p==2:
		return False

	for i in range(3, limit, 2):
		if p%i == 0:
			return False
	return True

def primes(limit=100000000):
	yield 2
	for i in range(3, limit, 2):
		if isPrime(i):
			yield i
			
def main():
	getcontext().prec = 124
	prod = Decimal(1)
	one = Decimal(1)
	for p in primes():
		prod *= one/(one - one/(p*p));
		tmp_pi = str((prod*Decimal(6)).sqrt())
		#sleep(1)
	print("{0} with {1} as last prime. {2} exact decimal places.".format(tmp_pi, p, correctUntil(tmp_pi)))
	
	#print("{0:.124f}".format((prod*Decimal(6)).sqrt()))
	
if __name__ == "__main__":
	main()
